<?php

/**
 * @file
 * Code for the Challenges feature.
 */
include_once('challenges.features.inc');

function challenge_owner_or_admin($node) {
  global $user;
  return (!is_sro() && user_access('edit any challenge content')) || (is_sro() && $node->field_sro[LANGUAGE_NONE][0]['uid'] == $user->uid);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function challenges_form_challenge_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  // Remove 'View changes'
  unset($form['actions']['preview_changes']);

  // Hide fields and add 'Submit' button for normal users
  if (!challenge_owner_or_admin($form['#node'])) {
    $form['revision_information']['#type'] = 'hidden';
    $form['field_challenge_status']['#type'] = 'hidden';
    $form['field_status_summary']['#type'] = 'hidden';
    $form['field_archive_reason']['#type'] = 'hidden';

    unset($form['field_archive_date']);
    unset($form['field_review_date']);
    unset($form['field_response_close_date']);
    unset($form['field_proposal_close_date']);
    unset($form['field_sro']);
    unset($form['field_featured']);
    unset($form['field_weight']);

    // Add 'Submit' button.
    $form['actions']['publish'] = array(
      '#type' => 'submit',
      '#access' => TRUE,
      '#value' => 'Submit',
      '#type' => 'submit',
      '#weight' => 6,
      '#submit' => $form['actions']['submit']['#submit'],
    );

    // Rename 'Save' to 'Save draft' button.
    $form['actions']['submit']['#value'] = 'Save draft';
    $form['#after_build'][] = 'site_remove_form_admin_options';

  }
  else {
    // Preserve previous moderation status for admins and challenge owners.
    // Workbench moderation always sets it to 'Draft' when editing node with enabled moderation.
    // Use form after build to execute code after workbench_moderation_form_alter().
    $form['#after_build'][] = 'site_preserve_previous_moderation_status';
  }
  $form['#submit'][] = 'challenges_node_submit';
}

/**
 * Custom submit function for challenge content type.
 */
function challenges_node_submit($form, &$form_state) {
  if(isset($form_state['clicked_button'])) {
    //$action = empty($form['#node']->nid) ? 'created' : 'updated';
    if ($form_state['clicked_button']['#value'] == "Submit") {
      $form_state['values']['workbench_moderation_state_new'] = 'needs_review';
      $message = &drupal_static('moderation_state_messages', NULL);
      $message = MSG_NEEDS_REVIEW;
    }
    elseif ($form_state['clicked_button']['#value'] == "Save draft") {
      $form_state['values']['workbench_moderation_state_new'] = 'draft';
      $message = &drupal_static('moderation_state_messages', NULL);
      $message = MSG_DRAFT;
    }
  }
}

function challenges_node_presave($node) {
  if ($node->type == 'challenge') {
    $challenge_status = (int) $node->field_challenge_status['und'][0]['value'];
    if ($challenge_status > 0) {
      // Disable commenting for challenges other than suggested.
      // comments closed == 1; status live == 1, archived == 2, completed == 3
      $node->comment = 1; // COMMENT_NODE_CLOSED = 1, COMMENT_NODE_OPEN = 2, COMMENT_NODE_HIDDEN = 0
    }
    else {
      // Enable commenting for challenges in status suggested.
      // comments open == 2; status suggested == 0;
      $node->comment = 2; // COMMENT_NODE_CLOSED = 1, COMMENT_NODE_OPEN = 2, COMMENT_NODE_HIDDEN = 0
    }
  }
}

/**
 * Implements hook_site_bypass_moderation().
 */
function challenges_site_bypass_moderation($node) {
  if ($node->type == 'challenge') {
    if (challenge_owner_or_admin($node)) {
      $node->bypass_moderation = TRUE;
    }
  }
}

/**
 * Implements hook_node_access().
 */
function challenges_node_access($node, $op, $account) {
  global $user;
  if (is_string($node))
    return NODE_ACCESS_IGNORE;
  if ($node->type == 'challenge' && $op == 'update') {
    // Allow access for admins and sro challenge owners and authors which suggested the challenge
    if (challenge_owner_or_admin($node) || ($user->uid != 0 && $node->uid == $user->uid)) {
      return NODE_ACCESS_ALLOW;
    }
    else {
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_preprocess_node().
 */
function challenges_preprocess_node(&$variables) {
  if ($variables['type'] == 'challenge') {

    // Add number of responses, proposals, standard profiles and comments on these.
    $query = db_select('node');
    $query->join('field_data_field_challenge_ref', 'challenge_ref', 'node.nid = challenge_ref.entity_id');
    $query->join('field_data_field_proposal_phase', 'proposal_phase', 'proposal_phase.entity_id AND node.vid = proposal_phase.revision_id');
    $query->leftJoin('comment', 'comment', 'comment.nid = node.nid');
    $query->condition('challenge_ref.field_challenge_ref_nid', $variables['nid'])
      ->condition('node.status', 1);
    $query->addExpression('SUM(CASE WHEN field_proposal_phase_value = 0 THEN 1 ELSE 0 END)', 'response_count');
    $query->addExpression('SUM(CASE WHEN field_proposal_phase_value = 1 THEN 1 ELSE 0 END)', 'proposal_count');
    $query->addExpression('SUM(CASE WHEN field_proposal_phase_value = 2 THEN 1 ELSE 0 END)', 'profile_count');
    $query->addExpression('SUM(comment.status)', 'comment_count');
    $result = $query->execute()->fetchAssoc();
    // Add challenge comments to comments on proposals and responses to get total number of comments.
    $result['comment_count'] = $variables['comment_count'] + $result['comment_count'];
    $variables = array_merge($variables, $result);

    // There is a difference between preprocessing node view page and teaser used in views, the latter haven't got ['und'];
    $challenge_status = isset($variables['field_challenge_status'][LANGUAGE_NONE][0]['value']) ? $variables['field_challenge_status'][LANGUAGE_NONE][0]['value'] : $variables['field_challenge_status'][0]['value'];
    $variables['challenge_status'] = $challenge_status;

    drupal_add_js(array('challenges' => array('stage' => $challenge_status)), 'setting');

    $response_close_date = $proposal_close_date = FALSE;
    if (isset($variables['field_response_close_date'][LANGUAGE_NONE][0]['value'])) {
      $response_close_date = $variables['field_response_close_date'][LANGUAGE_NONE][0]['value'];
    }
    elseif (isset($variables['field_response_close_date'][0]['value'])) {
      $response_close_date = $variables['field_response_close_date'][0]['value'];
    }

    if (isset($variables['field_proposal_close_date'][LANGUAGE_NONE][0]['value'])) {
      $proposal_close_date = $variables['field_proposal_close_date'][LANGUAGE_NONE][0]['value'];
    }
    elseif (isset($variables['field_proposal_close_date'][0]['value'])) {
      $proposal_close_date = $variables['field_proposal_close_date'][0]['value'];
    }

    $variables['status_summary'] = FALSE;
    $variables['challenge_statistics'] = FALSE;

    if ($challenge_status == '0') { // suggestion
      if ($variables['comment'] == 2) { // COMMENT_NODE_OPEN
        $variables['status_summary'] = 'Challenge open for comments.';
      }
      else {
        $variables['status_summary'] = 'Challenge closed for comments.';
      }
    }
    else if ($challenge_status == '1' || $challenge_status == '2') { // response || proposal
      // Add status summary.
      if (isset($response_close_date) && (int) $response_close_date > time()) {
        $variables['status_summary'] = 'Challenge open for responses<br>Submit your response by ' . format_date($response_close_date, 'short') . '</br>';
      }
      else {
        $variables['status_summary'] = 'Challenge closed for responses</br>';

        if (isset($proposal_close_date)) {
          if (!empty($variables['proposal_count'])) {
            $variables['status_summary'] .= format_plural($variables['proposal_count'], ' Proposal ', ' Proposals ');
            if ((int) $proposal_close_date > time()) {
              $variables['status_summary'] .= 'open for comment by ' . format_date($proposal_close_date, 'short') . '</br>';
            }
            else {
              $variables['status_summary'] .= 'closed for comment</br>';
            }
          }
          else {
            $variables['status_summary'] .= 'Proposals in development';
          }
        }
      }
      // Add challenge statistics.
      $challenge_statistics = array();
      if (!empty($variables['response_count'])) {
        $challenge_statistics[] = $variables['response_count'] . format_plural($variables['response_count'], ' response', ' responses');
      }
      if (!empty($variables['proposal_count'])) {
        $challenge_statistics[] = $variables['proposal_count'] . format_plural($variables['proposal_count'], ' proposal', ' proposals');
      }
      // Solution should be only one in most cases, probably there is no need to count it
//      if (!empty($variables['profile_count'])) {
//        $challenge_statistics[] = $variables['profile_count'] . format_plural($variables['profile_count'], ' solution', ' solutions');
//      }
      if (!empty($variables['comment_count'])) {
        $challenge_statistics[] = $variables['comment_count'] . format_plural($variables['comment_count'], ' comment', ' comments');
      }
      $variables['challenge_statistics'] = implode(', ', $challenge_statistics);
    }

    if ($variables['view_mode'] == 'full') {
      $variables['responses'] = views_embed_view('challenge_proposals', 'block');
      $variables['proposals'] = views_embed_view('challenge_proposals', 'block_1');
      $variables['solutions'] = views_embed_view('challenge_proposals', 'block_2');
    }
    else {

      // Add links to proposals.
      $query = db_select('node');
      $query->join('field_data_field_challenge_ref', 'challenge_ref', 'node.nid = challenge_ref.entity_id');
      $query->join('field_data_field_proposal_phase', 'proposal_phase', 'proposal_phase.entity_id AND node.vid = proposal_phase.revision_id');
      $query->fields('node', array('nid', 'title'))
            ->condition('challenge_ref.field_challenge_ref_nid', $variables['nid'])
            ->condition('proposal_phase.field_proposal_phase_value', 1)
            ->condition('node.status', 1);
      $result = $query->execute();

      foreach ($result as $proposal) {
        $variables['proposals'][] = l($proposal->title, 'node/' . $proposal->nid);
      }

    }

    // Hide 'Subscribe' label.
    $variables['content']['subscriptions_ui']['subscriptions_ui_form']['wrapper']['#title'] = FALSE;
  }
}