<?php

// https://github.com/datagovuk/dgu_d7/pull/239









define('MSG_NEEDS_REVIEW', 'Many thanks for your contribution. It will appear on the site very shortly, just as soon as we have confirmed that it meets the <a href="/terms-and-conditions">Terms and Conditions</a>.');
define('MSG_DRAFT', 'Please note that you can come back to do more work on your contribution later, draft versions are listed in <a href="/monitor-progress">\'My Dashboard\'</a>.');

/**
 * Implements hook_block_info().
 */
function site_block_info() {
  $blocks['login_to_make_proposal'] = array(
      'info' => t('Login to participate'),
      'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['suggest_challenge'] = array(
      'info' => t('Suggest new challenge'),
      'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function site_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'login_to_make_proposal':
      $block['subject'] = '';
      if (user_is_anonymous()) {
        $block['content'] = l('Login', 'user/login', array('query' => drupal_get_destination())) . ' or ' . l('Register', 'user/register', array('query' => drupal_get_destination())) . ' to participate';
      } else {
        global $user;
        $block['content'] = '<div>Logged in as ' . $user->name . ' | <a href="/user">My Profile</a> | <a href="/user/logout">Logout</a></div>';
      }
      break;

    case 'suggest_challenge':
      $block['subject'] = '';
      if (user_is_anonymous()) {
        $block['content'] = l('Login', 'user/login', array('query' => array('destination' => 'node/add/challenge'))) . ' or ' . l('Register', 'user/register', array('query' => array('destination' => 'node/add/challenge'))) . ' to suggest a new challenge';
      } else {
        $block['content'] = '<h4>' . l('Suggest new challenge', 'node/add/challenge', array('query' => array('destination' => 'challenges/suggested'))) . '</h4>';
      }
      break;
  }
  return $block;
}


// TODO get rid of that
function is_admin(&$user = NULL) {
  if(empty($user)) {
    global $user;
  }
  //TODO check permission not role
  return $user->uid == 1 || in_array('editor', array_values($user->roles)) || in_array('administrator', array_values($user->roles));
}

// TODO get rid of that
function is_sro(&$user = NULL) {
  if(empty($user)) {
    global $user;
  }
  //TODO check permission not role
  return $user->uid == 1 || in_array('SRO', array_values($user->roles));
}



// TODO get rid of that
/**
 * Implements hook_form_alter().
 */
function site_form_alter(&$form, &$form_state, $form_id) {
  $form['#after_build'][] = 'site_form_alter_afterbuild';
}

// TODO get rid of that
function site_form_alter_afterbuild($form, &$form_state) {
  if(isset($form['options']['workbench_moderation_state_new']) && is_admin()) {
    $form['options']['workbench_moderation_state_new']['#value'] = 'published';
  }
  return $form;
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function site_form_contact_site_form_alter(&$form, &$form_state, $form_id) {
  $form['desc']['#type'] = 'item';
  $form['desc']['#markup'] = 'We welcome your comments, whether these relate to the website or to the underlying standards process itself. Please use this form to tell us what you think.';
  $form['desc']['#weight'] = -1;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function site_form_relation_add_block_form_alter(&$form, &$form_state, $form_id) {

  $relation_type = relation_type_load('profile_version');
  $relation = (object) relation_create('profile_version', array());

  // Create one autocomplete for each endpoint beyond the first
  $direction = '/target';
  for ($i = 2; $i <= $relation_type->max_arity; $i++) {
    $form['relation_options']['targets']['target_' . $i] = array(
        '#type' => 'textfield',
        '#title' => t('Standard Version'),
        '#autocomplete_path' => 'relation_add/autocomplete/profile_version' . $direction . '/none',
    );
  }
  field_attach_form('relation', $relation, $form['relation_options'], $form_state);

  $form['current_entity']['#type'] = 'hidden';
  unset($form['relation_type_item']);
  unset($form['relation_options']['endpoints']);
  unset($form['relation_options']['explanation']);

  $form['relation_options']['save'] = array(
      '#type' => 'submit',
      '#weight' => 100,
      '#value' => t('Create relation'),
      '#submit' => array('relation_add_save'),
  );
}



function site_node_view($node) {
  if ($node->type == 'proposal') {
    $no_message = &drupal_static('no_message');
    if(isset($node->field_incorporated_in[LANGUAGE_NONE][0]['items'])
       && isset($node->field_proposal_status[LANGUAGE_NONE][0]['value'])
       && $node->field_proposal_status[LANGUAGE_NONE][0]['value'] != 5) {
      $node->field_proposal_status[LANGUAGE_NONE][0]['value'] = 5; //incorporated
      $node->comment = 1;
      $no_message = TRUE;
      node_save($node);
    }
    elseif (empty($node->field_incorporated_in[LANGUAGE_NONE][0]['items'])
            && $node->field_proposal_status[LANGUAGE_NONE][0]['value'] == 5) { //if not incorporated anymore but status set to incorporated
      $node->field_proposal_status[LANGUAGE_NONE][0]['value'] = 4; //archived
      $node->comment = 1;
      $no_message = TRUE;
      node_save($node);
    }




    if((is_admin() || is_sro()) && isset($node->field_relation[LANGUAGE_NONE])) {
      relation_profile_to_standard_version_check_other_assessment_questions($node->field_relation[LANGUAGE_NONE]);
    }
  }
}

function site_node_presave($node) {
  $no_message = drupal_static('no_message');
  if(!$no_message) {
    _site_set_moderation($node);
  }

  if ($node->type == 'challenge') {
    $challenge_status = (int) $node->field_challenge_status['und'][0]['value'];
    if ($challenge_status > 0) {
      // Disable commenting for challenges other than suggested.
      // comments closed == 1; status live == 1, archived == 2, completed == 3
      $node->comment = 1;
    }
    else {
      // Enable commenting for challenges in status suggested.
      // comments open == 2; status suggested == 0;
      $node->comment = 2;
    }
  }

  if ($node->type == 'proposal') {
    if ($node->field_proposal_status['und'][0]['value'] != 1) {
      $node->comment = 1;
    }


    // Hack to avoid sql exception caused by date field with timestamp and field_collemction module https://drupal.org/node/1889744
    if(strpos($node->field_eval_review_date[LANGUAGE_NONE][0]['value'], '-') != FALSE) { // e.g "2013-07-03 05:22"
      $node->field_eval_review_date[LANGUAGE_NONE][0]['value'] = strtotime($node->field_eval_review_date[LANGUAGE_NONE][0]['value']);
    }
    if(strpos($node->field_modification_date[LANGUAGE_NONE][0]['value'], '-') != FALSE) { // e.g "2013-07-03 05:22"
      $node->field_modification_date[LANGUAGE_NONE][0]['value'] = strtotime($node->field_modification_date[LANGUAGE_NONE][0]['value']);
    }

    $phases = array('response', 'proposal', 'profile');
    $path = $node->path;
    $alias_array = explode('/', $path['alias']);
    if (in_array($alias_array[0], $phases)) {
      $alias_array[0] = $phases[$node->field_proposal_phase[LANGUAGE_NONE][0]['value']];
      $node->path['pathauto'] = 0;
      $node->path['alias'] = implode('/', $alias_array);
      //path_save($node->path);
    }


  }
}

function _site_set_moderation($node) {
  if (in_array($node->type, array('challenge', 'proposal'))) {

    if (!is_admin() && !is_sro()) {
      //use field_completion_status as moderation state only for non admins
      $completion_status = $node->field_completion_status['und'][0]['value'];
      if ($completion_status == 'needs_review') {
        drupal_set_message(MSG_NEEDS_REVIEW);
      }
      else {
        drupal_set_message(MSG_DRAFT);
      }

      if ($completion_status != 'draft') {
        $node->workbench_moderation_state_new = $completion_status;
      }
      else {
        $node->workbench_moderation_state_new = 'draft';
      }
    }
    else {
      //$node->workbench_moderation_state_new = 'published';
    }
  }
}

/**
 * Implements hook_node_load().
 */
function site_node_load($nodes, $types) {
  if (in_array('proposal', $types)) {
    foreach ($nodes as $node) {
      if (isset($node->field_challenge_ref['und'][0]['nid'])) {

        // Get value of field_close_comments field in parent challenge
        $result = db_select('field_data_field_close_comments', 'cc')
          ->fields('cc', array('field_close_comments_value'))
          ->condition('entity_type', 'node')
          ->condition('bundle', 'challenge')
          ->condition('entity_id', $node->field_challenge_ref['und'][0]['nid'])
          ->execute()->fetchField();

        if ($result == '0') {
          $node->comment = 1;
        }
      }
    }
  }
}

// TODO get rid of that
function site_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ((is_admin() || is_sro()) && !empty($data['tabs'][0]['output'])) {
    foreach ($data['tabs'][0]['output'] as $index => &$tab) {
        if($tab['#link']['title'] == 'New draft') {
          $tab['#link']['title'] = 'Edit';
        }
    }
  }

  if($root_path == 'challenges' || $router_item['tab_parent'] == 'challenges') {

    // Count (published) challenges by status
    $query = "SELECT field_challenge_status_value AS status, COUNT(field_challenge_status_value) AS quantity
      FROM {field_data_field_challenge_status} st
      JOIN {node} as n ON st.entity_id = n.nid
      WHERE n.status = 1
      GROUP BY field_challenge_status_value";
    $challenge_statuses = array(0 => 0, 1 => 0, 2 => 0, 3 => 0, 4 => 0);
    foreach (db_query($query) as $row) {
      $challenge_statuses[$row->status] = $row->quantity;
    }

    // suggested
    $data['tabs'][0]['output'][0]['#link']['title'] = $data['tabs'][0]['output'][0]['#link']['title'] . ' (' . $challenge_statuses[0] . ')';
    // current
    $data['tabs'][0]['output'][1]['#link']['title'] = $data['tabs'][0]['output'][1]['#link']['title'] . ' (' . $challenge_statuses[1] . ')';
    // under evaluation
    $data['tabs'][0]['output'][2]['#link']['title'] = $data['tabs'][0]['output'][2]['#link']['title'] . ' (' . $challenge_statuses[2] . ')';
    // completed
    $data['tabs'][0]['output'][3]['#link']['title'] = $data['tabs'][0]['output'][3]['#link']['title'] . ' (' . $challenge_statuses[3] . ')';
    // archived
    $data['tabs'][0]['output'][4]['#link']['title'] = $data['tabs'][0]['output'][4]['#link']['title'] . ' (' . $challenge_statuses[4] . ')';
  }
}


//function site_preprocess_page(&$vars) {
//  if (arg(0) == 'challenges') {
//    $vars['title'] = '';
//  }
//}

function site_page_alter(&$page) {
   //print_r($page);die;
  // Removes default Drupal messages about creating and updating proposal.
  if (isset($_SESSION['messages']['status'])) {
    if ($_SESSION['messages']['status'][0] == MSG_DRAFT || $_SESSION['messages']['status'][0] == MSG_NEEDS_REVIEW) {
      unset($_SESSION['messages']['status'][1]);
    }
  }

  //node 132 is 'Track Progress' landing page
  if(isset($page['content']['system_main']['nodes'][132])){
    unset($page['content']['system_main']['nodes'][132]['links']);
  }

  if(isset($page['content']['quicktabs_test'])) {
    //if challenge node is present and status is other than 'suggested'
    $node = node_load(arg(1));
    if($node && $node->field_challenge_status[LANGUAGE_NONE][0]['value'] != '0') {
      $divs = &$page['content']['quicktabs_test']['content']['container']['divs'];

      $max_phase;
      // Adding number of items in each tab
      foreach ($page['content']['quicktabs_test']['content']['tabs']['tablinks'] as $index => &$tab) {
        $count = substr_count($divs[$index]['content']['#markup'], 'views-field-title');
        $tab['#title'] = $tab['#title'] . ' (' . $count . ')';

        if ($count) {
          $max_phase = $index;
        }
      };

      if (false || count($divs) > $max_phase) {
        // Hide all tabs content.
        $divs[0]['#prefix'] = '<div id="quicktabs-tabpage-test-0" class="quicktabs-tabpage quicktabs-hide">';
        $divs[1]['#prefix'] = '<div id="quicktabs-tabpage-test-1" class="quicktabs-tabpage quicktabs-hide">';
        $divs[2]['#prefix'] = '<div id="quicktabs-tabpage-test-2" class="quicktabs-tabpage quicktabs-hide">';
        // Show tab matching max_phase index;
        $divs[$max_phase]['#prefix'] = '<div id="quicktabs-tabpage-test-' . $max_phase . '" class="quicktabs-tabpage">';

        // Set activetab header.
        $page['content']['quicktabs_test']['content']['tabs']['#options']['active'] = $max_phase;
      }



      foreach ($page['content']['system_main']['nodes'] as $nid => &$node) {
        unset($node['comments']);
      };

    }
    else {
      unset($page['content']['quicktabs_test']);
    }
  }

  //not displaying comment form on unpublished nodes with no comments
  if(isset($page['content']['system_main']['nodes'])) {
    foreach ($page['content']['system_main']['nodes'] as $nid => &$node) {
      if (is_numeric($nid) && !$node['#node']->comment_count && !$node['#node']->status) {
        unset($node['comments']);
      }

    }

  }
}
