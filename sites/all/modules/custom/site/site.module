<?php

define('MSG_NEEDS_REVIEW', 'Many thanks for your contribution. It will appear on the site very shortly, just as soon as we have confirmed that it meets the <a href="/terms-and-conditions">Terms and Conditions</a>.');
define('MSG_DRAFT', 'Please note that you can come back to do more work on your contribution later, draft versions are listed in <a href="/monitor-progress">\'My Dashboard\'</a>.');

/**
 * Implements hook_menu_alter().
 */
function site_menu_alter(&$items) {
  // Override the node edit menu item title.
  $items['node/%node/edit']['title callback'] = 'site_edit_tab_title';
  $items['node/%node/edit']['title arguments'] = array(1);

  // Override the node view menu item title.
  $items['node/%node/view']['title callback'] = 'site_view_tab_title';
  $items['node/%node/view']['title arguments'] = array(1);

  $a = $items['comment/%comment/edit'];

  // Custom access callback to avoid Drupal limitation http://redmine.co-dev1.dh.bytemark.co.uk/issues/1351
  $items['comment/%comment/edit']['access callback'] = 'site_comment_access';
}

/**
 * Change the name of the node edit tab, conditionally.
 *
 * @param $node
 *   The node being acted upon.
 *
 * @return
 *   The title for the tab.
 */
function site_edit_tab_title($node) {
  module_invoke_all('site_bypass_moderation', $node);
  if (isset($node->bypass_moderation) && $node->bypass_moderation) {
    return t('Edit');
  }
  // If user doesn't bypass moderation apply workbench moderation logic.
  return workbench_moderation_edit_tab_title($node);
}

/**
 * Change the name of the node edit tab, conditionally.
 *
 * @param $node
 *   The node being acted upon.
 *
 * @return
 *   The title for the tab.
 */
function site_view_tab_title($node) {
  module_invoke_all('site_bypass_moderation', $node);
  if (isset($node->bypass_moderation) && $node->bypass_moderation) {
    return t('View');
  }
  // If user isn't a moderator apply workbench moderation logic.
  return workbench_moderation_view_tab_title($node);
}

function site_comment_access($op, $comment) {
  global $user;

  if ($op == 'edit') {
    return ($user->uid && $user->uid == $comment->uid && in_array($comment->status, array(COMMENT_PUBLISHED, COMMENT_NOT_PUBLISHED)) && user_access('edit own comments')) || user_access('administer comments');
  }
}

/**
 * Implements hook_block_info().
 */
function site_block_info() {
  $blocks['login_to_make_proposal'] = array(
      'info' => t('Login to participate'),
      'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['suggest_challenge'] = array(
      'info' => t('Suggest new challenge'),
      'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function site_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'login_to_make_proposal':
      $block['subject'] = '';
      if (user_is_anonymous()) {
        $block['content'] = l('Login', 'user/login', array('query' => drupal_get_destination())) . ' or ' . l('Register', 'user/register', array('query' => drupal_get_destination())) . ' to participate';
      } else {
        global $user;
        $block['content'] = '<div>Logged in as ' . $user->name . ' | <a href="/user">My Profile</a> | <a href="/user/logout">Logout</a></div>';
      }
      break;

    case 'suggest_challenge':
      $block['subject'] = '';
      if (user_is_anonymous()) {
        $block['content'] = l('Login', 'user/login', array('query' => array('destination' => 'node/add/challenge'))) . ' or ' . l('Register', 'user/register', array('query' => array('destination' => 'node/add/challenge'))) . ' to suggest a new challenge';
      } else {
        $block['content'] = '<h4>' . l('Suggest new challenge', 'node/add/challenge', array('query' => array('destination' => 'challenges/suggested'))) . '</h4>';
      }
      break;
  }
  return $block;
}

function is_sro(&$user = NULL) {
  if(empty($user)) {
    global $user;
  }
  return in_array('SRO', array_values($user->roles));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function site_form_contact_site_form_alter(&$form, &$form_state, $form_id) {
  $form['desc']['#type'] = 'item';
  $form['desc']['#markup'] = 'We welcome your comments, whether these relate to the website or to the underlying standards process itself. Please use this form to tell us what you think.';
  $form['desc']['#weight'] = -1;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function site_form_relation_add_block_form_alter(&$form, &$form_state, $form_id) {

  $relation_type = relation_type_load('profile_version');
  $relation = (object) relation_create('profile_version', array());

  // Create one autocomplete for each endpoint beyond the first
  $direction = '/target';
  for ($i = 2; $i <= $relation_type->max_arity; $i++) {
    $form['relation_options']['targets']['target_' . $i] = array(
        '#type' => 'textfield',
        '#title' => t('Standard Version'),
        '#autocomplete_path' => 'relation_add/autocomplete/profile_version' . $direction . '/none',
    );
  }
  field_attach_form('relation', $relation, $form['relation_options'], $form_state);

  $form['current_entity']['#type'] = 'hidden';
  unset($form['relation_type_item']);
  unset($form['relation_options']['endpoints']);
  unset($form['relation_options']['explanation']);

  $form['relation_options']['save'] = array(
      '#type' => 'submit',
      '#weight' => 100,
      '#value' => t('Create relation'),
      '#submit' => array('relation_add_save'),
  );
}




/**
 * Implements hook_node_load().
 */
function site_node_load($nodes, $types) {
  if (in_array('proposal', $types)) {
    foreach ($nodes as $node) {
      if (isset($node->field_challenge_ref['und'][0]['nid'])) {

        // Get value of field_proposal_close_date field in parent challenge
        $result = db_select('field_data_field_proposal_close_date', 'cc')
          ->fields('cc', array('field_proposal_close_date_value'))
          ->condition('entity_type', 'node')
          ->condition('bundle', 'challenge')
          ->condition('entity_id', $node->field_challenge_ref['und'][0]['nid'])
          ->execute()->fetchField();

        if ($result && $result < time()) {
          $node->comment = 1; // COMMENT_NODE_CLOSED = 1, COMMENT_NODE_OPEN = 2, COMMENT_NODE_HIDDEN = 0
        }
      }
    }
  }
}

function site_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if($root_path == 'challenges' || $router_item['tab_parent'] == 'challenges') {

    // Count (published) challenges by status
    $query = "SELECT field_challenge_status_value AS status, COUNT(field_challenge_status_value) AS quantity
      FROM {field_data_field_challenge_status} st
      JOIN {node} as n ON st.entity_id = n.nid
      WHERE n.status = 1
      GROUP BY field_challenge_status_value";
    $challenge_statuses = array(0 => 0, 1 => 0, 2 => 0, 3 => 0, 4 => 0);
    foreach (db_query($query) as $row) {
      $challenge_statuses[$row->status] = $row->quantity;
    }

    // suggested
    $data['tabs'][0]['output'][0]['#link']['title'] = $data['tabs'][0]['output'][0]['#link']['title'] . ' (' . $challenge_statuses[0] . ')';
    // current
    $data['tabs'][0]['output'][1]['#link']['title'] = $data['tabs'][0]['output'][1]['#link']['title'] . ' (' . $challenge_statuses[1] . ')';
    // under evaluation
    $data['tabs'][0]['output'][2]['#link']['title'] = $data['tabs'][0]['output'][2]['#link']['title'] . ' (' . $challenge_statuses[2] . ')';
    // completed
    $data['tabs'][0]['output'][3]['#link']['title'] = $data['tabs'][0]['output'][3]['#link']['title'] . ' (' . $challenge_statuses[3] . ')';
    // archived
    $data['tabs'][0]['output'][4]['#link']['title'] = $data['tabs'][0]['output'][4]['#link']['title'] . ' (' . $challenge_statuses[4] . ')';
  }
}

function site_page_alter(&$page) {
   //print_r($page);die;
  // Removes default Drupal messages about creating and updating proposal.
  // TODO make this better -target only 'has been created/updated' messages
  if (isset($_SESSION['messages']['status'])) {
    if ($_SESSION['messages']['status'][0] == MSG_DRAFT || $_SESSION['messages']['status'][0] == MSG_NEEDS_REVIEW) {
      unset($_SESSION['messages']['status'][1]);
    }
  }

  if(isset($page['bottompanel']['quicktabs_test'])) {
    //if challenge node is present and status is other than 'suggested'
    $node = node_load(arg(1));
    if($node && $node->field_challenge_status[LANGUAGE_NONE][0]['value'] != '0') {

      $status = $node->field_challenge_status[LANGUAGE_NONE][0]['value'];
      $divs = &$page['bottompanel']['quicktabs_test']['content']['container']['divs'];

      if (count($divs) > $status) {
        // Hide all tabs content.
        $divs[0]['#prefix'] = '<div id="quicktabs-tabpage-test-0" class="quicktabs-tabpage quicktabs-hide">';
        $divs[1]['#prefix'] = '<div id="quicktabs-tabpage-test-1" class="quicktabs-tabpage quicktabs-hide">';
        $divs[2]['#prefix'] = '<div id="quicktabs-tabpage-test-2" class="quicktabs-tabpage quicktabs-hide">';
        $divs[3]['#prefix'] = '<div id="quicktabs-tabpage-test-3" class="quicktabs-tabpage quicktabs-hide">';
        // Show tab matching max_phase index;
        $divs[$status]['#prefix'] = '<div id="quicktabs-tabpage-test-' . $status . '" class="quicktabs-tabpage">';

        // Set activetab header.
        $page['bottompanel']['quicktabs_test']['content']['tabs']['#options']['active'] = $status;
      }
    }
    else {
      unset($page['content']['quicktabs_test']);
    }
  }

  // Don't display comment form on unpublished nodes with no comments
  if(isset($page['content']['system_main']['nodes'])) {
    foreach ($page['content']['system_main']['nodes'] as $nid => &$node) {
      if (is_numeric($nid) && !$node['#node']->comment_count && !$node['#node']->status) {
        unset($node['comments']);
      }
    }
  }
}

function site_exit() {
  if ($message = &drupal_static('moderation_state_messages', NULL)) {
    // Remove all status messages - most likely nothing more than '... has been created/updated'
    drupal_get_messages('status');
    // Add a message created in challenges_node_submit()
    drupal_set_message($message);
  }
}

/**
 * Form after build function to preserve previous moderation status for admins and challenge owners.
 * Use #afterbuild to apply changes after workbench moderation's hook_form_alter().
 *
 */
function site_preserve_previous_moderation_status($form, &$form_state) {
  if (!$form_state['triggering_element'] && isset($form['options']['workbench_moderation_state_new']['#options'])) {
    // Preserve current state value.
    $form['options']['workbench_moderation_state_new']['#default_value'] = $form['workbench_moderation_state_current']['#value'];
    $form['options']['workbench_moderation_state_new']['#value'] = $form['workbench_moderation_state_current']['#value'];

    // Recreate all moderation options from their machine names to get rid of 'Current:' added by Workbech Moderation
    foreach ($form['options']['workbench_moderation_state_new']['#options'] as $key => &$value) {
      $value = ucwords(str_replace('_', ' ', $key));
      // Add 'Current:' to proper state
      if ($key == $form['workbench_moderation_state_current']['#value']) {
        $value = 'Current: ' . $value;
      }
    }
  }
  elseif (isset($form['workbench_moderation_state_new'])) {
    $form['workbench_moderation_state_new']['#value'] = $form['workbench_moderation_state_current']['#value'];
  }
  return $form;
}

/**
 * Remove moderation state select box for SRO if:
 * - SRO suggests new challenge (uses 'Suggest a challenge' form like oridinary user).
 * - SRO responds to a challenge which is owned by somebody else
 * Use #afterbuild to apply changes after workbench moderation's hook_form_alter().
 */
function site_remove_form_admin_options($form, &$form_state) {
  if (is_sro() && isset($form['options'])) {
    unset($form['author']['date']);
    unset($form['author']['name']);
    unset($form['options']['log']);
    unset($form['options']['sticky']);
    unset($form['options']['promote']);
    unset($form['options']['workbench_moderation_state_new']);
  }

  // Remove text format, guidelines and help.
  foreach($form as $key => $value) {
    if (substr($key, 0, 6) == 'field_' && $value['#type'] == 'container' && isset($value[LANGUAGE_NONE][0]['#type']) && $value[LANGUAGE_NONE][0]['#type'] == 'text_format') {
      $form[$key][LANGUAGE_NONE][0]['format']['format']['#access'] = FALSE;
      $form[$key][LANGUAGE_NONE][0]['format']['guidelines']['#access'] = FALSE;
      $form[$key][LANGUAGE_NONE][0]['format']['help']['#access'] = FALSE;
      $form[$key][LANGUAGE_NONE][0]['format']['#type'] = 'container';
      $form[$key][LANGUAGE_NONE][0]['format']['#attributes']['class'][] = 'element-hidden';
    }
  }

  return $form;
}

function site_comment_presave($comment) {
  $field = field_info_field('comment_body');
  $langcode = field_is_translatable('comment', $field) ? entity_language('comment', $comment) : LANGUAGE_NONE;
  $comment_body = $comment->comment_body[$langcode][0];
  if (isset($comment_body['format'])) {
    $comment_text = check_markup($comment_body['value'], $comment_body['format']);
  }
  else {
    $comment_text = check_plain($comment_body['value']);
  }
  $comment->subject = truncate_utf8(trim(decode_entities(strip_tags($comment_text))), 29, TRUE);
  // Edge cases where the comment body is populated only by HTML tags will
  // require a default subject.
  if ($comment->subject == '') {
    $comment->subject = t('(No subject)');
  }
}
